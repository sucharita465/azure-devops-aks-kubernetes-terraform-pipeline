trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  terraformWorkingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
  backendAzureRmResourceGroupName: 'rg-sucharita'
  backendAzureRmStorageAccountName: 'stterra0897'
  backendAzureRmContainerName: 'stterra0897'
  # State file will differ per environment
  devBackendKey: 'aks-dev.tfstate'
  qaBackendKey: 'aks-qa.tfstate'

stages:

  # Stage-1: Validate
  - stage: TerraformValidate
    displayName: 'Terraform Validate'
    jobs:
      - job: validate
        displayName: 'Validate Terraform Configuration'
        steps:
          - task: TerraformInstaller@1
            inputs:
              terraformVersion: 'latest'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'svc-conn-aks'
              backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
              backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
              backendAzureRmContainerName: '$(backendAzureRmContainerName)'
              backendAzureRmKey: 'base.tfstate'
              workingDirectory: '$(terraformWorkingDirectory)'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Validate'
            inputs:
              provider: 'azurerm'
              command: 'validate'
              workingDirectory: '$(terraformWorkingDirectory)'

  # Stage-2: Plan & Apply for Dev
  - stage: DeployDev
    displayName: 'Deploy Dev AKS Cluster'
    dependsOn: TerraformValidate
    jobs:
      - job: plan_apply_dev
        displayName: 'Plan & Apply Dev'
        steps:
          - task: DownloadSecureFile@1
            displayName: 'Download SSH Key'
            name: sshkey
            inputs:
              secureFile: 'aks-terraform-devops-ssh-key-ububtu.pub'

          - task: TerraformInstaller@1
            inputs:
              terraformVersion: 'latest'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Init (Dev)'
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'svc-conn-aks'
              backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
              backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
              backendAzureRmContainerName: '$(backendAzureRmContainerName)'
              backendAzureRmKey: '$(devBackendKey)'
              workingDirectory: '$(terraformWorkingDirectory)'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Plan (Dev)'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              environmentServiceNameAzureRM: 'svc-conn-aks'
              workingDirectory: '$(terraformWorkingDirectory)'
              commandOptions: >
                -var ssh_public_key=$(sshkey.secureFilePath)
                -var environment=dev
                -out=tfplan

          - task: TerraformTaskV4@4
            displayName: 'Terraform Apply (Dev)'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              environmentServiceNameAzureRM: 'svc-conn-aks'
              workingDirectory: '$(terraformWorkingDirectory)'
              args: 'tfplan -auto-approve'

  # Stage-3: Plan & Apply for QA
  - stage: DeployQA
    displayName: 'Deploy QA AKS Cluster'
    dependsOn: DeployDev
    jobs:
      - job: plan_apply_qa
        displayName: 'Plan & Apply QA'
        steps:
          - task: DownloadSecureFile@1
            displayName: 'Download SSH Key'
            name: sshkey
            inputs:
              secureFile: 'aks-terraform-devops-ssh-key-ububtu.pub'

          - task: TerraformInstaller@1
            inputs:
              terraformVersion: 'latest'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Init (QA)'
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'svc-conn-aks'
              backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
              backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
              backendAzureRmContainerName: '$(backendAzureRmContainerName)'
              backendAzureRmKey: '$(qaBackendKey)'
              workingDirectory: '$(terraformWorkingDirectory)'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Plan (QA)'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              environmentServiceNameAzureRM: 'svc-conn-aks'
              workingDirectory: '$(terraformWorkingDirectory)'
              commandOptions: >
                -var ssh_public_key=$(sshkey.secureFilePath)
                -var environment=qa
                -out=tfplan

          - task: TerraformTaskV4@4
            displayName: 'Terraform Apply (QA)'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              environmentServiceNameAzureRM: 'svc-conn-aks'
              workingDirectory: '$(terraformWorkingDirectory)'
              args: 'tfplan -auto-approve'
